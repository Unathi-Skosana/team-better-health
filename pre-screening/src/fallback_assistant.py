"""
Fallback Medical Assistant that works without MedGemma access.
Uses alternative models or intelligent mock responses.
"""

import torch
from transformers import pipeline, AutoTokenizer, AutoModelForCausalLM
from typing import Dict, List, Optional
import json
import logging
try:
    from .local_medical_model import LocalMedicalModel
except ImportError:
    LocalMedicalModel = None


class FallbackMedicalAssistant:
    """
    Fallback medical assistant using local models or mock responses.
    """
    
    def __init__(self, use_mock: bool = False):
        """
        Initialize fallback medical assistant.
        
        Args:
            use_mock: If True, skip model loading and use mock responses
        """
        self.use_mock = use_mock
        self.pipeline = None
        self.tokenizer = None
        self.local_model = None
        
        # Configure logging
        logging.basicConfig(level=logging.INFO)
        self.logger = logging.getLogger(__name__)
        
        if not self.use_mock and LocalMedicalModel:
            self._try_load_local_model()
    
    def _try_load_local_model(self):
        """Try to load a local model for medical responses."""
        try:
            self.logger.info("Attempting to load local medical model...")
            self.local_model = LocalMedicalModel()
            
            if self.local_model.load_best_available_model():
                self.logger.info("✅ Local medical model loaded successfully!")
                return
            else:
                self.logger.warning("Failed to load local model, falling back to mock responses")
                self.use_mock = True
                
        except Exception as e:
            self.logger.error(f"Error loading local model: {str(e)}")
            self.use_mock = True
    
    def ask(self, query: str, patient_context: Optional[Dict] = None) -> Dict:
        """
        Process a medical query and return structured response.
        
        Args:
            query: Patient's medical question or symptom description
            patient_context: Optional patient information
            
        Returns:
            Dictionary containing the medical response and recommendations
        """
        try:
            if self.use_mock or not self.local_model:
                return self._generate_mock_response(query, patient_context)
            else:
                return self._generate_local_model_response(query, patient_context)
                
        except Exception as e:
            self.logger.error(f"Error processing query: {str(e)}")
            return {
                "status": "error",
                "message": f"Sorry, I encountered an error: {str(e)}",
                "recommendations": ["Please try again or consult a healthcare provider."]
            }
    
    def _generate_local_model_response(self, query: str, patient_context: Optional[Dict] = None) -> Dict:
        """Generate response using local model."""
        try:
            # Get response from local model
            model_response = self.local_model.generate_medical_response(query, patient_context)
            
            # Clean up the response
            if model_response.startswith(query):
                model_response = model_response[len(query):].strip()
            
            # Structure the response
            return {
                "status": "success",
                "query": query,
                "response": f"{model_response}\n\n📝 Note: Generated by local AI model. Always consult healthcare professionals for medical advice.",
                "recommendations": self._extract_recommendations_from_text(model_response),
                "urgency_level": self._assess_urgency_from_text(query + " " + model_response),
                "follow_up_questions": ["How long have you been experiencing these symptoms?", "Have you noticed any patterns or triggers?"],
                "timestamp": self._get_timestamp()
            }
            
        except Exception as e:
            self.logger.error(f"Error with local model: {str(e)}")
            return self._generate_mock_response(query, patient_context)
    
    def _extract_recommendations_from_text(self, text: str) -> List[str]:
        """Extract recommendations from model-generated text."""
        # Simple extraction - look for sentences with recommendation keywords
        recommendations = []
        sentences = text.split('.')
        
        for sentence in sentences:
            sentence = sentence.strip()
            if any(keyword in sentence.lower() for keyword in ['should', 'recommend', 'suggest', 'consider', 'try']):
                if len(sentence) > 10:
                    recommendations.append(sentence)
        
        # Default recommendations if none found
        if not recommendations:
            recommendations = [
                "Monitor your symptoms carefully",
                "Stay hydrated and get adequate rest", 
                "Consult a healthcare provider if symptoms worsen"
            ]
        
        return recommendations[:3]
    
    def _assess_urgency_from_text(self, text: str) -> str:
        """Assess urgency from combined query and response text."""
        text_lower = text.lower()
        
        urgent_keywords = ['emergency', 'urgent', 'severe', 'chest pain', 'difficulty breathing', 'call doctor']
        moderate_keywords = ['fever', 'pain', 'infection', 'persistent', 'medical attention']
        
        if any(keyword in text_lower for keyword in urgent_keywords):
            return "high"
        elif any(keyword in text_lower for keyword in moderate_keywords):
            return "moderate"
        else:
            return "low"
    
    def _get_timestamp(self) -> str:
        """Get current timestamp."""
        from datetime import datetime
        return datetime.now().isoformat()

    def _generate_mock_response(self, query: str, patient_context: Optional[Dict] = None) -> Dict:
        """Generate realistic mock responses for demo purposes."""
        
        # Analyze query for mock response generation
        query_lower = query.lower()
        
        # Mock response templates based on common symptoms
        mock_responses = {
            'cold_flu': {
                'response': "Based on your symptoms of runny/stuffy nose, sneezing, sore throat, and cough, this appears to be consistent with a common cold or upper respiratory viral infection. These symptoms typically develop gradually and are often accompanied by mild fatigue. Most colds resolve within 7-10 days with supportive care including rest, fluids, and symptomatic treatment.",
                'urgency': 'low',
                'recommendations': [
                    "Get plenty of rest and stay well-hydrated with water, warm broths, or herbal teas",
                    "Use saline nasal rinses or sprays to help with congestion",
                    "Consider over-the-counter medications for symptom relief (decongestants, throat lozenges, cough suppressants as needed)"
                ]
            },
            'chest_pain': {
                'response': "Based on your description of chest pain, this could be related to several conditions ranging from muscle strain to more serious cardiac issues. The location, duration, and triggers of the pain are important factors to consider.",
                'urgency': 'high',
                'recommendations': [
                    "Seek immediate medical evaluation, especially if pain is severe or accompanied by shortness of breath",
                    "Do not ignore chest pain - it's better to be evaluated and reassured",
                    "Call 911 if you experience severe chest pain with sweating, nausea, or shortness of breath"
                ]
            },
            'headache_fever': {
                'response': "The combination of headache and fever suggests your body may be fighting an infection. This could be viral (like flu or cold) or bacterial, and the severity and duration of symptoms help determine the appropriate care level.",
                'urgency': 'moderate',
                'recommendations': [
                    "Monitor your temperature and stay hydrated with plenty of fluids",
                    "Rest in a cool, dark room and consider over-the-counter fever reducers if appropriate",
                    "Seek medical care if fever exceeds 103°F (39.4°C) or if severe headache persists"
                ]
            },
            'headache': {
                'response': "Headaches can have various causes, from tension and stress to underlying medical conditions. The pattern, severity, and associated symptoms help determine the appropriate care level.",
                'urgency': 'moderate',
                'recommendations': [
                    "Monitor the pattern and triggers of your headaches",
                    "Consider over-the-counter pain relief if appropriate",
                    "Consult a healthcare provider if headaches are severe, frequent, or changing in pattern"
                ]
            },
            'fever': {
                'response': "Fever is often a sign that your body is fighting an infection. The height of the fever, duration, and accompanying symptoms help guide treatment decisions.",
                'urgency': 'moderate',
                'recommendations': [
                    "Stay hydrated and get plenty of rest",
                    "Monitor your temperature regularly",
                    "Seek medical care if fever persists over 3 days or exceeds 103°F (39.4°C)"
                ]
            },
            'cough': {
                'response': "A persistent cough can be caused by various conditions including infections, allergies, or underlying respiratory issues. The nature of the cough and any accompanying symptoms are important.",
                'urgency': 'moderate',
                'recommendations': [
                    "Stay hydrated to help thin mucus secretions",
                    "Avoid irritants like smoke or strong odors",
                    "Consult a healthcare provider if cough persists over 2 weeks or produces blood"
                ]
            },
            'sore_throat': {
                'response': "Sore throat can be caused by viral infections, bacterial infections (like strep throat), allergies, or irritants. The severity, associated symptoms, and duration help determine the likely cause and treatment approach.",
                'urgency': 'low',
                'recommendations': [
                    "Gargle with warm salt water and stay hydrated",
                    "Use throat lozenges or warm teas with honey for comfort",
                    "See a healthcare provider if severe pain, difficulty swallowing, or fever develops"
                ]
            },
            'default': {
                'response': "Thank you for sharing your symptoms. A proper medical evaluation would involve a detailed history, physical examination, and possibly diagnostic tests to provide an accurate assessment.",
                'urgency': 'low',
                'recommendations': [
                    "Keep track of your symptoms, including when they occur and any potential triggers",
                    "Consider consulting with a healthcare provider for proper evaluation",
                    "Seek immediate care if symptoms worsen significantly"
                ]
            }
        }
        
        # Determine which template to use based on symptom analysis
        template_key = 'default'
        
        # Check for multiple cold/flu symptoms
        cold_symptoms = ['runny nose', 'stuffy nose', 'sneezing', 'sore throat', 'cough', 'congestion']
        cold_count = sum(1 for symptom in cold_symptoms if symptom in query_lower)
        
        if cold_count >= 3:
            template_key = 'cold_flu'
        elif ('headache' in query_lower or 'head pain' in query_lower) and ('fever' in query_lower or 'temperature' in query_lower):
            template_key = 'headache_fever'
        else:
            # Check for individual symptoms
            for key in mock_responses.keys():
                if key != 'default' and key != 'cold_flu' and key != 'headache_fever':
                    if key.replace('_', ' ') in query_lower:
                        template_key = key
                        break
        
        template = mock_responses[template_key]
        
        # Add context-specific modifications
        response_text = template['response']
        if patient_context and patient_context.get('age'):
            age = patient_context['age']
            if isinstance(age, int):
                if age > 65:
                    response_text += " Given your age, it's particularly important to have symptoms evaluated promptly."
                elif age < 18:
                    response_text += " For pediatric symptoms, consultation with a healthcare provider is especially recommended."
        
        return {
            "status": "success",
            "query": query,
            "response": f"{response_text}\n\n📝 Note: ⚠️ This is a demo response using mock medical data. Not for actual medical use.",
            "recommendations": template['recommendations'],
            "urgency_level": template['urgency'],
            "follow_up_questions": ["How long have you been experiencing these symptoms?", "Have you noticed any patterns or triggers?"],
            "timestamp": self._get_timestamp()
        }


if __name__ == "__main__":
    # Quick test
    assistant = FallbackMedicalAssistant()
    print("Testing fallback assistant:")
    response = assistant.ask("I have a headache and fever")
    print(json.dumps(response, indent=2))